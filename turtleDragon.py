#Tera Schaller 7/21/2017
#Udacity Programming Foundations with Python
#Program to draw a dragon curve fractal
#Python 3.6.1, MacOS Sierra 10.12.5

#REFERENCES
#http://mathworld.wolfram.com/DragonCurve.html
#https://en.wikipedia.org/wiki/Dragon_curve

#??question to self: would it have been better to use lists instead of
#strings to generate the drawing path??

import turtle

#creates a string that will be used to guide drawing
def dragon_string(myString):
    #create a copy with middle direction inverted
    #final string = original + r + copy_with_mid_char_inversion

    #make substrings to altString
    mid = len(myString)//2
    altString1 = myString[0:mid]
    altString2 = myString[(mid+1):len(myString)]

    #invert middle character in altString
    if(myString[mid]=="l"):
        altString1+="r"
    else:
        altString1+="l"
    altString = altString1 + altString2

    #update final string
    myString = myString + "r" + altString
    
    return myString

#draws the string generated by dragon_string 
def dragon_draw(level):

    #make path string
    string0 = "rrl"
    for i in range(level):
        string0 = dragon_string(string0)
    print(string0)

    #make screen and turtle
    window = turtle.Screen()
    window.bgcolor("gray")
    dragon = turtle.Turtle()
    dragon.shape("classic")
    dragon.penup()
    dragon.goto(150, 50)
    dragon.pendown()
    dragon.speed(100)

    #draw the string
    dragon.forward(5)  
    for i in range(len(string0)):       
        if(string0[i]=="r"):
            dragon.right(90)
            dragon.forward(5)
        else:
            dragon.left(90)
            dragon.forward(5)

    window.exitonclick()

#call dragon_draw() at desired level
dragon_draw(10)
